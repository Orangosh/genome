(ns genome.spec.d3
  (require [clojure.java.io     :as io ]
           [incanter.core       :as i  ]
           [incanter.io         :as ii ]
           [incanter.stats      :as st ]
           [incanter.charts     :as c  ]
           [clojure.data.csv    :as csv]
           [genome.spec.getseqs :refer :all]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Loading data (see genome/spec/getseqs)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; genome.spec.getseqs :refer :all takes all 'samples' 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PREPARING DATA FOR d3/CIRCOS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Anotations- here it is very imporatant to destinguish between
;;  :ref-loc- is the true location of the original reference sequence
;;  :loc- is the location on the aligned sequences which includes indels
;;if we take the loc we standardtise all the annotations diversities and the genome.spec.selected ns


(defn get-locations [col postrand? begining? file]
  "gets a set with all begining or end of a positive or negative column"
  (let [gene     (if postrand? :gfwd+ :gfwd-)
        name-vec (->> file
                      (i/$where {col {:$ne "-"}})
                      (i/$ gene)
                      distinct)]
    (if begining?     
      (map #(i/$ (range 0 1) :all
                 (i/$where {col {:$ne "-"}}
                           (i/$where {gene {:$eq %}} file)))
           name-vec)
      (map #(i/$ (range 0 1) :all
                 (i/$order
                  :loc :desc
                  (i/$where {col {:$ne "-"}}
                            (i/$where {gene {:$eq %}} file))))
           name-vec))))

(defn get-genes [col postrand? begining? file ]
  (->>(get-locations col postrand? begining? file)
      (apply i/conj-rows)))
  (def m-get-genes (memoize get-genes))

(defn get-range-set [col postrand? file]
  (let [file+ (m-get-genes col postrand? true  file)
        file- (m-get-genes col postrand? false file)
        ncol (i/$ :loc file-)]
    (->> file+
         (i/add-column
          :end
          ncol)
         (i/rename-cols {:loc :start
                         :gfwd+ :gfwdp
                         :gfwd- :gfwdn
                         :CDS+  :CDSp
                         :CDS-  :CDSn})
         (i/$ [:r_seq  col   :start :end
               :gfwdp :gfwdn :CDSp  :CDSn]))))
  (def m-get-range-set (memoize get-range-set))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Creates map with :address and circos annonteded tables

(defn circosing-hcmv-ann []
  (let [ An19-Pb (hcmv_samples :519-Pb)] 
    {(str virus_home "primaries_common/circos_data/hcmv/genepos.csv")
     (m-get-range-set :gfwd+ true  An19-Pb)
     (str virus_home "primaries_common/circos_data/hcmv/geneneg.csv")
     (m-get-range-set :gfwd- false An19-Pb)
     (str virus_home "primaries_common/circos_data/hcmv/CDSpos.csv" )
     (m-get-range-set :CDS+  true  An19-Pb)
     (str virus_home "primaries_common/circos_data/hcmv/CDSneg.csv" )
     (m-get-range-set :CDS-  false An19-Pb)}))

(defn circosing-ebv-ann []
  (let [An44-Pb (ebv_samples :344-Pb)] 
    {(str virus_home "primaries_common/circos_data/ebv/genepos.csv")
     (m-get-range-set :gfwd+ true  An44-Pb)
     (str virus_home "primaries_common/circos_data/ebv/geneneg.csv")
     (m-get-range-set :gfwd- false An44-Pb)
     (str virus_home "primaries_common/circos_data/ebv/CDSpos.csv" )
     (m-get-range-set :CDS+  true  An44-Pb)
     (str virus_home "primaries_common/circos_data/ebv/CDSneg.csv" )
     (m-get-range-set :CDS- false  An44-Pb)}))

(defn circosing-hhv6-ann []
  (let [An37-Pb (hhv6_samples :537-Pb)] 
    {(str virus_home "primaries_common/circos_data/hhv6/genepos.csv")
     (m-get-range-set :gfwd+ true  An37-Pb)
     (str virus_home "primaries_common/circos_data/hhv6/geneneg.csv")
     (m-get-range-set :gfwd- false An37-Pb)
     (str virus_home "primaries_common/circos_data/hhv6/CDSpos.csv" )
     (m-get-range-set :CDS+  true  An37-Pb)
     (str virus_home "primaries_common/circos_data/hhv6/CDSneg.csv" )
     (m-get-range-set :CDS- false An37-Pb)}))

(defn cir-ann [circosing]
  (let [[file_out file_in] circosing]
    (with-open [f-out (io/writer file_out)]
      (csv/write-csv f-out [(map name (i/col-names file_in))])
      (csv/write-csv f-out (i/to-list file_in)))))


(defn map-cir-ann-sets [circosing]
  (map #(cir-ann %) circosing))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Diversity

(defn circos-database [file]
  (->> file
       (i/rename-cols {:r_seq   :sample
                       :loc     :position
                       :minfr   :value})
       (i/$ [:sample :position :value])))

(defn get-circosing
  [virus_home virus_name virus_samples samples_names]
  (let [path "primaries_common/circos_data/"]
    (apply hash-map
           (interleave
            (map #(str virus_home path virus_name "/" % ".csv") samples_names)
            (map #(virus_samples (keyword %))    samples_names)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn circosing-hcmv-primaries []          
  (get-circosing virus_home "hcmv" hcmv_samples hcmv_primaries_names))

(defn circosing-hcmv-momsib    []          
  (get-circosing virus_home "hcmv" hcmv_samples hcmv_momsib_names))

(defn circosing-ebv-primaries  []     
  (get-circosing virus_home "ebv" ebv_samples ebv_primaries_names))

(defn circosing-ebv-momsib     []          
  (get-circosing virus_home "ebv" ebv_samples ebv_momsib_names))

(defn circosing-hhv6-primaries []     
  (get-circosing virus_home "hhv6" hhv6_samples hhv6_primaries_names))

(defn circosing-hhv6-momsib    []          
  (get-circosing virus_home "hhv6" hhv6_samples hhv6_momsib_names))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn circos [circosing]
  (let [[file_out file_in] circosing
        file_inc           (circos-database file_in)]
    (with-open [f-out (io/writer file_out)]
      (csv/write-csv f-out [(map name (i/col-names file_inc))])
      (csv/write-csv f-out (i/to-list file_inc)))))


(defn map-circos-sets [circosing]
  (map #(circos %) circosing))


#_(map-circos-sets (circosing......))


