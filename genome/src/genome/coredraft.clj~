(ns genome.coredraft
  (:gen-class)
  (require [clojure.java.io   :as io ]
           [clojure.string    :as s  ]
           [clojure.data.csv  :as csv]
           [clojure.tools.cli :as cli]
           [incanter.core     :as i  ]
           [incanter.datasets :as id ]
           [incanter.io       :as ii ]
           [incanter.charts   :as c  ]
           [incanter.stats    :as st ]
           [genome.database   :as gd ]
           [genome.stats      :as gs ]
           [genome.pop        :as p  ]
           [genome.consvar    :as cv ]
           [genome.dna2aa     :as da ]))


(def cli-options
  [["-a" "-annotate"  "adds annotations"
    :default nil
    :parse-fn #(Integer/parseInt %)
    :validate [#(< 0 % 0x10000) "Must be a number between 0 and 65536"]]
   ["-c" "--compare"  "Compare genes"
    :id :verbosity
    :default 0
    :assoc-fn (fn [m k _] (update-in m [k] inc))]
   ["-d" "--database" ""]
   ["-f" "--dna2aa"   ""]
   ["-h" "--help"     ""]
   ["-l" "--analyse"  ""]
   ["-p" "--pop"      ""]
   ["-s" "--stats"    ""]
   ["-u" "--consvar"  "Deals with variants and concensus calling"
    :default
    :validate ]
   ["-v" "--view"     ""]])

(defn usage [options-summary]
  (->> ["This program try to deal with viral sequencing output."
        ""
        "Usage: program-name [options] action"
        ""
        "Options:"
        options-summary
        ""
        "Actions:"
        "  start    Start a new server"
        "  stop     Stop an existing server"
        "  status   Print a server's status"
        ""
        "Please refer to the manual page for more information."]
       (s/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with a error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
      (:help options) ; help => exit OK with usage summary
      {:exit-message (usage summary) :ok? true}
      errors ; errors => exit with description of errors
      {:exit-message (error-msg errors)}
      ;; custom validation on arguments
      (and (= 1 (count arguments))
           (#{"start" "stop" "status"} (first arguments)))
      {:action (first arguments) :options options}
      :else ; failed custom validation => exit with usage summary
      {:exit-message (usage summary)})))

(defn exit [status msg]
  (println msg)
  (System/exit status))

(defn -main [& args]
  (let [{:keys [action options exit-message ok?]} (validate-args args)]
    (if exit-message
      (exit (if ok? 0 1) exit-message)
      (case action
        "start"  (server/start! options)
        "stop"   (server/stop! options)
        "status" (server/status! options)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TESTING PIPELINE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main [file_in file_out]
  (println "Welcome to clojure- starting incanter")
  (gd/create-db file_in)

  (println "Creating first consensus")
  (def conded (cv/consensus gd/finalized cv/consus_un))

  (println "Correcting read errors")
  (def pois (cv/poissonize 0.05 conded))

  (def scrubed2 (i/$ [:r_seq :loc :ref :consus_un :cov :c_cov
                      :Tpois :Apois :Cpois :Gpois] pois))
  (println "Calculating nucleotide diversity")
  (def pied (p/pise scrubed2 p/pi_pois))

  (println "Calculating folded allele frequency spectra")
  (def sfsd (p/SFS pied p/folded-SFS))

  (println "adding negative strand")
  (def neg_stranded (da/pos>neg sfsd :consus_un :negsus_un))

  (println "adding consensus amino acids")
  (def aaadded (da/nuc>aa neg_stranded :consus_un :negsus_un))

  (println "removing INDELs")
  (def row_cleaned (gs/row-clean aaadded :ref "-"))
  
  (println "SUMMARY STATISTICS:")
  (gs/stat-report sfsd)

  (with-open [f-out (io/writer file_out)]
    (csv/write-csv f-out [(map name (i/col-names aaadded))])
    (csv/write-csv f-out (i/to-list aaadded))))


(defn ready []
  (-main "/home/yosh/datafiles/mpileup" "/home/yosh/datafiles/incanter"))


(defn show[from length]
  (def incanted (ii/read-dataset "/home/yosh/datafiles/incanter" :header true))
  (i/$ (range from (+ from length)) :all incanted))

