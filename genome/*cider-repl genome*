;; Connected to nREPL server - nrepl://localhost:36807
;; CIDER 0.14.0 (Berlin), nREPL 0.2.12
;; Clojure 1.8.0, Java 1.8.0_121
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you're new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you're seeing any warnings you should consult the manual's
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <,> to quickly invoke some REPL command
;; * Press <C-c C-z> to switch between the REPL and a Clojure file
;; * Press <M-.> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <C-c C-d C-d> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable `eldoc-mode' to display function & method signatures in the minibuffer.
;; * Print CIDER's refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you're thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you've encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don't panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the `cider-repl-clear-help-banner' command.
;; You can disable it from appearing on start by setting
;; `cider-repl-display-help-banner' to nil.
;; ======================================================================
genome.database> (ns database)
(require '[clojure.java.io :as io]
         '[incanter.core :as i]
         '[incanter.datasets :as id]
         '[incanter.io :as ii ]
         '[incanter.charts :as c]
         '[incanter.stats :as st]
         '[clojure.string :as s]
         '[clojure.data.csv :as csv])

;;;;;;;;;;;;;;looks if there in a nil to avoid nullpointer in the d&c_count
;;;;;;;;;;;;;;for a seq


(defn drop-parse [st]
  (let [s (Integer. (re-find  #"\d+" st ))]
    (apply str (drop (+ (inc (count (str s))) s) st))))

(defn sep-snp [sq]
 (if (not= nil sq)
   (let [seq (s/replace sq #"\^." "")] (->> seq 
         (apply str)
         (re-seq  #"[\+\-]\d*[^\+\-]*")
         (map drop-parse)
         (apply str (apply str (re-seq #"^[^\-\+]+" seq)))))
   "!"))

(defn create-map [seq]
  (let [sym {\A 0 \a 0 \T 0 \t 0
             \C 0 \c 0 \G 0 \g 0
             \. 0 \, 0 \* 0}
        freq (frequencies seq)]
    (merge sym freq)))

(defn merge-all [col_name ref merged]
  (cond
      (= (str col_name) ref)
      (merged \.)
      (= (str col_name) (s/lower-case ref))
      (merged \,)
      :else (merged col_name)))

(defn add-col [col_name dbase]
  (->> dbase
       (i/add-derived-column
        col_name
        [:ref :snap]
         #(merge-all col_name %1 %2))))

(defn unite [col_var col_ref col_name pile_set]
                (->> pile_set
                     (i/add-derived-column
                      col_name
                      [col_var col_ref] +)))

  (defn pie [T A G C cov] 
    (if (>=  cov 2)
      (/(+ (* T A) (* T G) 
           (* T C) (* A G) 
           (* A C) (* G C))
        (/ (* cov (- cov 1))
           2))
      (- 1 1)))

nil
nil
#'database/drop-parse
#'database/sep-snp
#'database/create-map
#'database/merge-all
#'database/add-col
#'database/unite
#'database/pie
database> (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized2
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (/  (reduce + (i/$ :pie pied)) (i/nrow finalized)))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: Unable to resolve symbol: file in this context, compiling:(*cider-repl genome*:117:3) 
database> (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (/  (reduce + (i/$ :pie pied)) (i/nrow finalized)))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: Unable to resolve symbol: finalized2 in this context, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:284:10) 
database> (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (div  (reduce + (i/$ :pie pied)) (i/nrow finalized)))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
#'database/create-db
database> (create-db "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf")
Opens a TSV
database> (create-db "/home/yosh/datafiles/02-519-Pa_CMV_S10/output/mpileup")
Opens a TSV
Renameing colums
Separating-snp
adds column of nuc
nuc_div
Nucleotide diversity:  1193268894658/105373906222725
nil
database> (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (div  (reduce + (i/$ :pie pied)) (i/nrow finalized)))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: Unable to resolve symbol: div in this context, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:529:29) 
database> (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
#'database/create-db
database> (create-db "/home/yosh/datafiles/02-519-Pa_CMV_S10/output/mpileup")
Opens a TSV
Renameing colums
Separating-snp
adds column of nuc
nuc_div
Nucleotide diversity:  0.01132414
nil
database> (create-db "/home/yosh/datafiles/02-519-Pa_CMV_S10/output/mpileup")
Opens a TSV
Renameing colums
Separating-snp
adds column of nuc
nuc_div
Nucleotide diversity:  0.01132414
nil
database> (create-db "/home/yosh/datafiles/02-519-Pc_CMV_S26whole/output/mpileup")
Opens a TSV
Renameing colums
xxSeparating-snp
adds column of nuc
nuc_div
Nucleotide diversity:  0.007050321
nil
database> (create-db "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf")
Opens a TSV
Renameing colums
Separating-snp
adds column of nuc
nuc_div


database> 
database> 
database>  (ich/scatter-plot
  :Position 
  :Varindex 
  :title (str significance)
  :group-by :ff
  :x-label "Position"
  :y-label "Variance"
  :legend true
  :data data)
 (ich/add-lines
  :Covx
  :Covy
  :legend true
  :data data)                                   ;  (ich/set-theme :dark))
 (ic/view)) (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
         :loc
         :pie
         :x-label "Position"
         :y-label "diversity"
         :title "02-519Pb AKA''Blip'"
                                        ;:legend true
         :data pied) (ich/add-lines
  :Covx
  :Covy
  :legend true
  :data data)                                   ;  (ich/set-theme :dark))
 (ic/view))
        

  (def pie_num (i/sum (i/$map 
                       (fn [T A G C cov]
                         (if (>=  cov 2)
                           (/(+ (* T A) 
                                (* T G) 
                                (* T C) 
                                (* A G) 
                                (* A C) 
                                (* G C))
                             (/ (* cov (- cov 1))
                                2))
                           (- 1 1)))
                       [:Tun :Aun :Gun :Cun :cov] finalized)))
    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:670:12) 
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:679:2) 
CompilerException java.lang.RuntimeException: No such namespace: ic, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:684:2) 
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:764:22) 
database>  (ich/scatter-plot
  :Position 
  :Varindex 
  :title (str significance)
  :group-by :ff
  :x-label "Position"
  :y-label "Variance"
  :legend true
  :data data)
 (ich/add-lines
  :Covx
  :Covy
  :legend true
  :data data)                                   ;  (ich/set-theme :dark))
 (ic/view)) (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
           :loc
           :pie
           :x-label "Position"
           :y-label "diversity"
           :title "02-519Pb AKA''Blip'"
                                        ;:legend true
           :data pied) 
          (c/add-lines
           :loc
           :cov
           :legend true
           :data pied))                                   ;  (ich/set-theme :dark))

    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:795:12) 
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:804:2) 
CompilerException java.lang.RuntimeException: No such namespace: ic, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:809:2) 
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.IllegalArgumentException: assoc expects even number of arguments after map/vector, found odd number, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:890:11) 
database>  (ich/scatter-plot
  :Position 
  :Varindex 
  :title (str significance)
  :group-by :ff
  :x-label "Position"
  :y-label "Variance"
  :legend true
  :data data)
 (ich/add-lines
  :Covx
  :Covy
  :legend true
  :data data)                                   ;  (ich/set-theme :dark))
 (ic/view)) (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
           :loc
           :pie
           :x-label "Position"
           :y-label "diversity"
           :title "02-519Pb AKA''Blip'"
                                        ;:legend true
           :data pied) 
          (c/add-lines
           :loc
           :cov
           :legend true
           :data pied))                                   ;  (ich/set-theme :dark))

    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:906:12) 
CompilerException java.lang.RuntimeException: No such namespace: ich, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:915:2) 
CompilerException java.lang.RuntimeException: No such namespace: ic, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:920:2) 
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.IllegalArgumentException: assoc expects even number of arguments after map/vector, found odd number, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:1001:11) 
database>  (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

                                  ;  (ich/set-theme :dark))

    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
CompilerException java.lang.IllegalArgumentException: assoc expects even number of arguments after map/vector, found odd number, compiling:(/home/yosh/Software/clojure/genome/*cider-repl genome*:1098:11) 
database>  (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

                                  ;  (ich/set-theme :dark))

    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  
#'database/create-db
database>  (defn create-db [file_in & file_out]
  
  (println "Opens a TSV") 
  
  (def pileup (ii/read-dataset file_in :header false :delim \tab))
  ; "/home/yosh/datafiles/02-519-Pb_CMV_S18whole/output/mpuf"
  (println "Renameing colums")
  
  (def renamed (i/rename-cols
                {:col0     :r_seq
                 :col1     :loc
                 :col2     :ref
                 :col3     :cov
                 :col4     :reads
                 :col5     :qual}
                pileup))
  
  (println "Separating-snp")
  
  (def  seperated-snp (->> renamed
                           (i/add-derived-column
                            :SNPs
                            [:reads]
                            #(sep-snp %))))
  
  (def scrubed
    (->> seperated-snp
         (i/$ [:r_seq :loc :ref :cov :SNPs])))
  
  (println "adds column of nuc")
  
  (def mapped 
    (->> scrubed
         (i/add-derived-column
          :snap
          [:SNPs]
          #(create-map %1))))

  (def mapped2
    (->> mapped
         (i/$ [:r_seq :loc :ref :cov :snap])))

  (def collumned (->> mapped2
                   (add-col \A)
                   (add-col \a)
                   (add-col \T)
                   (add-col \t)
                   (add-col \C)
                   (add-col \c)
                   (add-col \G)
                   (add-col \g)
                   (add-col \*)))

  
  (def reunited
    (->> (unite \A \a :Aun collumned)
         (unite \T \t :Tun)
         (unite \C \c :Cun)
         (unite \G \g :Gun))) 

  (def finalized
    (->> reunited
         (i/$ [:r_seq :loc :ref :cov :Aun :Tun :Cun :Gun ])))

  (def pied 
    (->> finalized
         (i/add-derived-column
          :pie
          [:Tun :Aun :Gun :Cun :cov]
          #(pie %1 %2 %3 %4 %5))))

  (println "nuc_div")

  (i/view (c/xy-plot
           :loc
           :pie
           :x-label "Position"
           :y-label "diversity"
           :title "02-519Pb AKA''Blip'"
                                        ;:legend true
           :data pied) 
          (c/add-lines
           :loc
           :cov
           :data pied))                                   ;  (ich/set-theme :dark))

    
  (def nucleotide_diversity (float (/  (reduce + (i/$ :pie pied)) (i/nrow pied))))

  (println "Nucleotide diversity: " nucleotide_diversity))
  